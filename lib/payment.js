// Generated by CoffeeScript 1.7.1
(function() {
  var addClass, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, hasClass, hasTextSelected, luhnCheck, normalizeEvent, on_, payment, preventDefault, reFormatCardNumber, removeClass, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, setCardType, toggleClass, trim,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.payment = payment = {};

  hasClass = function(element, className) {
    return new RegExp(' ' + className + ' ').test(' ' + element.className + ' ');
  };

  addClass = function(element, className) {
    if (element.classList) {
      return element.classList.add(className);
    }
    if (element.className) {
      element.className += " " + className;
      return;
    }
    element.className = className;
  };

  toggleClass = function(element, className, force) {
    var add;
    if (element.classList) {
      return element.classList.toggle(className, force);
    }
    add = typeof force === "undefined" ? !hasClass(element, className) : force;
    if (add) {
      addClass(element, className);
    } else {
      removeClass(element, className);
    }
  };

  removeClass = function(element, className) {
    var reg;
    if (element.classList) {
      return element.classList.remove(className);
    }
    reg = new RegExp("(?:^|\\s+)" + className + "(?!\S)", "g");
    element.className = element.className.replace(reg, "");
  };

  trim = function(string) {
    string = '' + string;
    if (String.prototype.trim) {
      return String.prototype.trim.call(string);
    } else {
      return string.replace(/^\s+|\s+$/g, '');
    }
  };

  on_ = function(element, eventName, callback) {
    var originalCallback;
    originalCallback = callback;
    callback = function(e) {
      e = normalizeEvent(e);
      return originalCallback(e);
    };
    if (element.addEventListener) {
      return element.addEventListener(eventName, callback, false);
    }
    if (element.attachEvent) {
      eventName = "on" + eventName;
      return element.attachEvent(eventName, callback);
    }
    element['on' + eventName] = callback;
  };

  preventDefault = function(eventObject) {
    if (typeof eventObject.preventDefault === "function") {
      eventObject.preventDefault();
      return;
    }
    eventObject.returnValue = false;
    return false;
  };

  normalizeEvent = function(e) {
    var original;
    original = e;
    e = {
      which: original.which != null ? original.which : void 0,
      target: original.target || original.srcElement,
      preventDefault: function() {
        return preventDefault(original);
      },
      originalEvent: original
    };
    if (e.which == null) {
      e.which = original.charCode != null ? original.charCode : original.keyCode;
    }
    return e;
  };

  defaultFormat = /(\d{1,4})/g;

  cards = [
    {
      type: 'maestro',
      pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dinersclub',
      pattern: /^(36|38|30[0-5])/,
      format: defaultFormat,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'laser',
      pattern: /^(6706|6771|6709)/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'jcb',
      pattern: /^35/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      pattern: /^62/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'discover',
      pattern: /^(6011|65|64[4-9]|622)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      pattern: /^5[1-5]/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'amex',
      pattern: /^3[47]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [3, 4],
      luhn: true
    }, {
      type: 'visa',
      pattern: /^4/,
      format: defaultFormat,
      length: [13, 16],
      cvcLength: [3],
      luhn: true
    }
  ];

  cardFromNumber = function(num) {
    var card, _i, _len;
    num = (num + '').replace(/\D/g, '');
    for (_i = 0, _len = cards.length; _i < _len; _i++) {
      card = cards[_i];
      if (card.pattern.test(num)) {
        return card;
      }
    }
  };

  cardFromType = function(type) {
    var card, _i, _len;
    for (_i = 0, _len = cards.length; _i < _len; _i++) {
      card = cards[_i];
      if (card.type === type) {
        return card;
      }
    }
  };

  luhnCheck = function(num) {
    var digit, digits, odd, sum, _i, _len;
    odd = true;
    sum = 0;
    digits = (num + '').split('').reverse();
    for (_i = 0, _len = digits.length; _i < _len; _i++) {
      digit = digits[_i];
      digit = parseInt(digit, 10);
      if ((odd = !odd)) {
        digit *= 2;
      }
      if (digit > 9) {
        digit -= 9;
      }
      sum += digit;
    }
    return sum % 10 === 0;
  };

  hasTextSelected = function(target) {
    var _ref;
    if ((target.selectionStart != null) && target.selectionStart !== target.selectionEnd) {
      return true;
    }
    if (typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? typeof _ref.createRange === "function" ? _ref.createRange().text : void 0 : void 0 : void 0) {
      return true;
    }
    return false;
  };

  reFormatCardNumber = function(e) {
    return setTimeout((function(_this) {
      return function() {
        var target, value;
        target = e.target;
        value = payment.formatCardNumberString(target.value);
        return target.value = value;
      };
    })(this));
  };

  formatCardNumber = function(e) {
    var card, digit, length, re, target, upperLength, value;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    target = e.target;
    value = target.value;
    card = cardFromNumber(value + digit);
    length = (value.replace(/\D/g, '') + digit).length;
    upperLength = 16;
    if (card) {
      upperLength = card.length[card.length.length - 1];
    }
    if (length >= upperLength) {
      return;
    }
    if ((target.selectionStart != null) && target.selectionStart !== value.length) {
      return;
    }
    if (card && card.type === 'amex') {
      re = /^(\d{4}|\d{4}\s\d{6})$/;
    } else {
      re = /(?:^|\s)(\d{4})$/;
    }
    if (re.test(value)) {
      e.preventDefault();
      return target.value = value + ' ' + digit;
    } else if (re.test(value + digit)) {
      e.preventDefault();
      return target.value = value + digit + ' ';
    }
  };

  formatBackCardNumber = function(e) {
    var target, value;
    target = e.target;
    value = target.value;
    if (e.which !== 8) {
      return;
    }
    if ((target.selectionStart != null) && target.selectionStart !== value.length) {
      return;
    }
    if (/\d\s$/.test(value)) {
      e.preventDefault();
      return target.value = value.replace(/\d\s$/, '');
    } else if (/\s\d?$/.test(value)) {
      e.preventDefault();
      return target.value = value.replace(/\s\d?$/, '');
    }
  };

  formatExpiry = function(e) {
    var digit, target, value;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    target = e.target;
    value = target.value + digit;
    if (/^\d$/.test(value) && (value !== '0' && value !== '1')) {
      e.preventDefault();
      return target.value = "0" + value + " / ";
    } else if (/^\d\d$/.test(value)) {
      e.preventDefault();
      return target.value = "" + value + " / ";
    }
  };

  formatForwardExpiry = function(e) {
    var digit, target, value;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    target = e.target;
    value = target.value;
    if (/^\d\d$/.test(value)) {
      return target.value = "" + value + " / ";
    }
  };

  formatForwardSlash = function(e) {
    var slash, target, value;
    slash = String.fromCharCode(e.which);
    if (slash !== '/') {
      return;
    }
    target = e.target;
    value = target.value;
    if (/^\d$/.test(value) && value !== '0') {
      return target.value = "0" + val + " / ";
    }
  };

  formatBackExpiry = function(e) {
    var target, value;
    target = e.target;
    value = target.value;
    if (e.which !== 8) {
      return;
    }
    if ((target.selectionStart != null) && target.selectionStart !== value.length) {
      return;
    }
    if (/\d(\s|\/)+$/.test(value)) {
      e.preventDefault();
      return target.value = value.replace(/\d(\s|\/)*$/, '');
    } else if (/\s\/\s?\d?$/.test(value)) {
      e.preventDefault();
      return target.value = value.replace(/\s\/\s?\d?$/, '');
    }
  };

  restrictNumeric = function(e) {
    var input;
    if (e.originalEvent.metaKey || e.originalEvent.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return e.preventDefault();
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    if (!/[\d\s]/.test(input)) {
      return e.preventDefault();
    }
  };

  restrictCardNumber = function(e) {
    var card, digit, target, value;
    target = e.target;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected(target)) {
      return;
    }
    value = (target.value + digit).replace(/\D/g, '');
    card = cardFromNumber(value);
    if (card) {
      if (value.length > card.length[card.length.length - 1]) {
        return e.preventDefault();
      }
    } else {
      if (value.length > 16) {
        return e.preventDefault();
      }
    }
  };

  restrictExpiry = function(e) {
    var digit, target, value;
    target = e.target;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected(target)) {
      return;
    }
    value = target.value + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 6) {
      return e.preventDefault();
    }
  };

  restrictCVC = function(e) {
    var digit, target, value;
    target = e.target;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected(target)) {
      return;
    }
    value = target.value + digit;
    if (value.length > 4) {
      return e.preventDefault();
    }
  };

  setCardType = function(e) {
    var card, cardType, target, value, _i, _len;
    target = e.target;
    value = target.value;
    cardType = payment.cardType(value) || 'unknown';
    if (!hasClass(target, cardType)) {
      removeClass(target, 'unknown');
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        removeClass(target, card.type);
      }
      addClass(target, cardType);
      return toggleClass(target, 'identified', cardType !== 'unknown');
    }
  };

  payment.formatCardCVC = function(element) {
    payment.restrictNumeric(element);
    on_(element, 'keypress', restrictCVC);
    return element;
  };

  payment.formatCardExpiry = function(element) {
    payment.restrictNumeric(element);
    on_(element, 'keypress', restrictExpiry);
    on_(element, 'keypress', formatExpiry);
    on_(element, 'keypress', formatForwardSlash);
    on_(element, 'keypress', formatForwardExpiry);
    on_(element, 'keydown', formatBackExpiry);
    return element;
  };

  payment.formatCardNumber = function(element) {
    payment.restrictNumeric(element);
    on_(element, 'keypress', restrictCardNumber);
    on_(element, 'keypress', formatCardNumber);
    on_(element, 'keydown', formatBackCardNumber);
    on_(element, 'keyup', setCardType);
    on_(element, 'paste', reFormatCardNumber);
    return element;
  };

  payment.restrictNumeric = function(element) {
    on_(element, 'keypress', restrictNumeric);
    return element;
  };

  payment.cardExpiryVal = function(value) {
    var month, prefix, year, _ref;
    value = value.replace(/\s/g, '');
    _ref = value.split('/', 2), month = _ref[0], year = _ref[1];
    if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
      prefix = (new Date).getFullYear();
      prefix = prefix.toString().slice(0, 2);
      year = prefix + year;
    }
    month = parseInt(month, 10);
    year = parseInt(year, 10);
    return {
      month: month,
      year: year
    };
  };

  payment.validateCardNumber = function(num) {
    var card, _ref;
    num = (num + '').replace(/\s+|-/g, '');
    if (!/^\d+$/.test(num)) {
      return false;
    }
    card = cardFromNumber(num);
    if (!card) {
      return false;
    }
    return (_ref = num.length, __indexOf.call(card.length, _ref) >= 0) && (card.luhn === false || luhnCheck(num));
  };

  payment.validateCardExpiry = (function(_this) {
    return function(month, year) {
      var currentTime, expiry, prefix, _ref;
      if (typeof month === 'object' && 'month' in month) {
        _ref = month, month = _ref.month, year = _ref.year;
      }
      if (!(month && year)) {
        return false;
      }
      month = trim(month);
      year = trim(year);
      if (!/^\d+$/.test(month)) {
        return false;
      }
      if (!/^\d+$/.test(year)) {
        return false;
      }
      if (!(parseInt(month, 10) <= 12)) {
        return false;
      }
      if (year.length === 2) {
        prefix = (new Date).getFullYear();
        prefix = prefix.toString().slice(0, 2);
        year = prefix + year;
      }
      expiry = new Date(year, month);
      currentTime = new Date;
      expiry.setMonth(expiry.getMonth() - 1);
      expiry.setMonth(expiry.getMonth() + 1, 1);
      return expiry > currentTime;
    };
  })(this);

  payment.validateCardCVC = function(cvc, type) {
    var _ref, _ref1;
    cvc = trim(cvc);
    if (!/^\d+$/.test(cvc)) {
      return false;
    }
    if (type) {
      return _ref = cvc.length, __indexOf.call((_ref1 = cardFromType(type)) != null ? _ref1.cvcLength : void 0, _ref) >= 0;
    } else {
      return cvc.length >= 3 && cvc.length <= 4;
    }
  };

  payment.cardType = function(num) {
    var _ref;
    if (!num) {
      return null;
    }
    return ((_ref = cardFromNumber(num)) != null ? _ref.type : void 0) || null;
  };

  payment.formatCardNumberString = function(num) {
    var card, groups, upperLength, _ref;
    card = cardFromNumber(num);
    if (!card) {
      return num;
    }
    upperLength = card.length[card.length.length - 1];
    num = num.replace(/\D/g, '');
    num = num.slice(0, +upperLength + 1 || 9e9);
    if (card.format.global) {
      return (_ref = num.match(card.format)) != null ? _ref.join(' ') : void 0;
    } else {
      groups = card.format.exec(num);
      if (groups != null) {
        groups.shift();
      }
      return groups != null ? groups.join(' ') : void 0;
    }
  };

}).call(this);
